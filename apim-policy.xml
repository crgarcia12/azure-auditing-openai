<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Request.Headers.GetValueOrDefault("WorkloadIdentifier", "") != "")">
                <set-header name="Authorization" exists-action="skip">
                    <value>@("Bearer " + context.Request.Headers.GetValueOrDefault("api-key", ""))</value>
                </set-header>
                <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
                    <openid-config url="https://login.microsoftonline.com/c7e2a36c-c3cc-446c-9008-82b7b66e618f/v2.0/.well-known/openid-configuration" />
                    <audiences>
                        <audience>78ee302b-9c7a-4800-99cb-e22cc1b062af</audience>
                    </audiences>
                    <required-claims>
                        <claim name="roles" match="any">
                            <value>2c49e959-1bee-4e10-8be2-7f40a49024d8</value>
                            <value>78ee302b-9c7a-4800-99cb-e22cc1b062af</value>
                        </claim>
                    </required-claims>
                </validate-jwt>
                <set-header name="api-key" exists-action="override">
                    <value>{{openai-key}}</value>
                </set-header>
                <set-variable name="workloadIdentifier" value="@(context.Request.Headers.GetValueOrDefault("WorkloadIdentifier", ""))" />
                <!-- Extract user information from JWT -->
                <set-variable name="user" value="@{
                string jwt = context.Request.Headers.GetValueOrDefault("Authorization", "").Substring("Bearer ".Length);
                string[] jwtParts = jwt.Split('.');
                string payloadJson = Encoding.UTF8.GetString(Convert.FromBase64String(jwtParts[1]));
                JObject payload = JObject.Parse(payloadJson);
                return payload.GetValue("name", StringComparison.OrdinalIgnoreCase)?.ToString() ?? "";
                }" />
                <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>())" />
                <set-body>@{ 
                JObject inBody = (JObject) context.Variables["requestBody"]; 
                return inBody.ToString(); 
                }</set-body>
            </when>
            <otherwise>
                <!-- If the header is missing, return an error -->
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{
                "error": "missing_header",
                "error_description": "The 'WorkloadIdentifier' header is required."
                }</set-body>
                </return-response>
            </otherwise>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-variable name="responseBody" value="@(context.Response.Body.As<JObject>())" />
        <log-to-eventhub logger-id="OpenAIAudit">@{
        JObject responseBody = (JObject)context.Variables["responseBody"];
        JObject requestBody = (JObject)context.Variables["requestBody"];

        return new JObject(
          new JProperty("completion_tokens", (int)responseBody["usage"]["completion_tokens"]),
          new JProperty("prompt_tokens", (int)responseBody["usage"]["prompt_tokens"]),
          new JProperty("total_tokens", (int)responseBody["usage"]["total_tokens"]),
          new JProperty("text", responseBody["choices"][0]["text"]),
          new JProperty("WorkloadIdentifier", (string)context.Variables["workloadIdentifier"]),
          new JProperty("User", (string)context.Variables["user"]),
          new JProperty("FullRequestBody", requestBody.ToString()),
          new JProperty("FullResponseBody", responseBody.ToString())
        ).ToString();
      }</log-to-eventhub>
        <set-body>@{ 
                JObject inBody = (JObject) context.Variables["responseBody"]; 
                return inBody.ToString(); 
        }</set-body>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>